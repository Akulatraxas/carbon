# This defines how many datapoints the aggregator remembers for
# each metric. Datapoints older than MAX_AGGREGATION_INTERVALS * interval
# seconds will be dropped.
MAX_AGGREGATION_INTERVALS = 5


# An optional feature of the aggregator is to selectively aggregate
# certain metrics matching the aggregation rules. Regular expressions
# are typically much slower than simple string methods, which are
# usually sufficient for filtering. So the point of this setting
# is to let you specify your own python code to implement
# the filtering logic as efficiently as makes sense for your filtering needs.
#
# In your module you must define a function called "allow" that takes
# a metric name as its only argument and is expected to return a bool
# result. If it returns True the metric will have aggregation rules applied
# to it and thus it will contribute to aggregate metrics if it matches a rule.
# If your allow function returns False then the metric will not be considered
# by the aggregator even if it matches your aggregation rules.
#
# Example
#
# def allow(metric):
#   """Avoid aggregating inventory metrics."""
#   if metric.startswith('inventory'):
#     return False
#   else:
#     return True
#
#AGGREGATION_FILTER_MODULE = /path/to/your/module.py
